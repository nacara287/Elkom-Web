<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="general.xslt"?>
<Invoice xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:cctc="urn:un:unece:uncefact:documentation:2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:udt="urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2" xmlns:gdt="urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:ubltr="urn:oasis:names:specification:ubl:schema:xsd:TurkishCustomizationExtensionComponents" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
  <ext:UBLExtensions>
    <ext:UBLExtension>
      <ext:ExtensionContent>
        <auto-generated-wildcard />
      </ext:ExtensionContent>
    </ext:UBLExtension>
  </ext:UBLExtensions>
  <cbc:UBLVersionID>2.1</cbc:UBLVersionID>
  <cbc:CustomizationID>TR1.2</cbc:CustomizationID>
  <cbc:ProfileID>TICARIFATURA</cbc:ProfileID>
  <cbc:ID>EFA2019000000003</cbc:ID>
  <cbc:CopyIndicator>false</cbc:CopyIndicator>
  <cbc:UUID>2EAA8A57-C07B-4994-86DB-E28964B8B0E1</cbc:UUID>
  <cbc:IssueDate>2019-02-20</cbc:IssueDate>
  <cbc:IssueTime>19:30:07</cbc:IssueTime>
  <cbc:InvoiceTypeCode>SATIS</cbc:InvoiceTypeCode>
  <cbc:Note>YAZI İLE: YÜZONSEKİZ TÜRK LİRASI  </cbc:Note>
  <cbc:DocumentCurrencyCode>TRY</cbc:DocumentCurrencyCode>
  <cbc:PricingCurrencyCode>TRY</cbc:PricingCurrencyCode>
  <cbc:LineCountNumeric>1</cbc:LineCountNumeric>
  <cac:AdditionalDocumentReference>
    <cbc:ID>5AA5AB81-CDAE-466E-9F29-F13DFBB86AF5</cbc:ID>
    <cbc:IssueDate>2019-02-20</cbc:IssueDate>
    <cbc:DocumentType>Xslt</cbc:DocumentType>
    <cac:Attachment>
      <cbc:EmbeddedDocumentBinaryObject mimeCode="application/xml" encodingCode="Base64" characterSetCode="UTF-8" filename="EFA2019000000003.xslt"></cbc:EmbeddedDocumentBinaryObject>
    </cac:Attachment>
  </cac:AdditionalDocumentReference>
  <cac:Signature>
    <cbc:ID schemeID="VKN_TCKN">4620553774</cbc:ID>
    <cac:SignatoryParty>
      <cbc:WebsiteURI>www.hizliteknoloji.com.tr</cbc:WebsiteURI>
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4620553774</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>HIZLI BİLİŞİM TEST FİRMA LTD.ŞTİ</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:StreetName>MahalleSemt CaddeSokak</cbc:StreetName>
        <cbc:BuildingName />
        <cbc:CitySubdivisionName>SEYHAN</cbc:CitySubdivisionName>
        <cbc:CityName>ADANA</cbc:CityName>
        <cac:Country>
          <cbc:Name>TÜRKİYE</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cac:TaxScheme>
          <cbc:Name>VergiDairesi</cbc:Name>
          <cbc:TaxTypeCode>VergiDairesi</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:Contact>
        <cbc:Telephone>03222481222</cbc:Telephone>
        <cbc:Telefax>03222481222</cbc:Telefax>
        <cbc:ElectronicMail>info@hizliteknoloji.com.tr</cbc:ElectronicMail>
      </cac:Contact>
    </cac:SignatoryParty>
    <cac:DigitalSignatureAttachment>
      <cac:ExternalReference>
        <cbc:URI>#Signature_2F85C3C0-5A4A-47B5-9451-9F7025898955</cbc:URI>
      </cac:ExternalReference>
    </cac:DigitalSignatureAttachment>
  </cac:Signature>
  <cac:AccountingSupplierParty>
    <cac:Party>
      <cbc:WebsiteURI>www.hizliteknoloji.com.tr</cbc:WebsiteURI>
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4620553774</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>HIZLI BİLİŞİM TEST FİRMA LTD.ŞTİ</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:StreetName>MahalleSemt CaddeSokak</cbc:StreetName>
        <cbc:BuildingName />
        <cbc:CitySubdivisionName>SEYHAN</cbc:CitySubdivisionName>
        <cbc:CityName>ADANA</cbc:CityName>
        <cac:Country>
          <cbc:Name>TÜRKİYE</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cac:TaxScheme>
          <cbc:Name>VergiDairesi</cbc:Name>
          <cbc:TaxTypeCode>VergiDairesi</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:Contact>
        <cbc:Telephone>03222481222</cbc:Telephone>
        <cbc:Telefax>03222481222</cbc:Telefax>
        <cbc:ElectronicMail>info@hizliteknoloji.com.tr</cbc:ElectronicMail>
      </cac:Contact>
    </cac:Party>
  </cac:AccountingSupplierParty>
  <cac:AccountingCustomerParty>
    <cac:Party>
      <cbc:WebsiteURI />
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4620553774</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>HIZLI BİLİŞİM TEKNOLOJİLERİ ANONİM ŞİRKETİ</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:StreetName>x </cbc:StreetName>
        <cbc:CitySubdivisionName>x</cbc:CitySubdivisionName>
        <cbc:CityName>x</cbc:CityName>
        <cac:Country>
          <cbc:Name>x</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cac:TaxScheme>
          <cbc:Name>x</cbc:Name>
          <cbc:TaxTypeCode>x</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:Contact>
        <cbc:Telephone />
        <cbc:Telefax />
        <cbc:ElectronicMail />
        <cbc:Note />
      </cac:Contact>
    </cac:Party>
  </cac:AccountingCustomerParty>
  <cac:AllowanceCharge>
    <cbc:ChargeIndicator>false</cbc:ChargeIndicator>
    <cbc:Amount currencyID="TRY">0</cbc:Amount>
  </cac:AllowanceCharge>
  <cac:PricingExchangeRate>
    <cbc:SourceCurrencyCode>TRY</cbc:SourceCurrencyCode>
    <cbc:TargetCurrencyCode>TRY</cbc:TargetCurrencyCode>
    <cbc:CalculationRate>0</cbc:CalculationRate>
    <cbc:Date>2019-02-20</cbc:Date>
  </cac:PricingExchangeRate>
  <cac:PaymentMeans>
    <cbc:PaymentMeansCode>10</cbc:PaymentMeansCode>
    <cbc:PaymentDueDate>2020-02-13</cbc:PaymentDueDate>
    <cbc:PaymentChannelCode/>
    <cbc:InstructionNote>NAKİT</cbc:InstructionNote>
    <cac:PayeeFinancialAccount>
      <cbc:ID>TR0100000000000000000000</cbc:ID>
      <cbc:CurrencyCode>TRY</cbc:CurrencyCode>
    </cac:PayeeFinancialAccount>
  </cac:PaymentMeans>
  <cac:TaxTotal>
    <cbc:TaxAmount currencyID="TRY">18.00</cbc:TaxAmount>
    <cac:TaxSubtotal>
      <cbc:TaxableAmount currencyID="TRY">100</cbc:TaxableAmount>
      <cbc:TaxAmount currencyID="TRY">18.00</cbc:TaxAmount>
      <cbc:Percent>18</cbc:Percent>
      <cac:TaxCategory>
        <cac:TaxScheme>
          <cbc:Name>KDV</cbc:Name>
          <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:TaxCategory>
    </cac:TaxSubtotal>
  </cac:TaxTotal>
  <cac:LegalMonetaryTotal>
    <cbc:LineExtensionAmount currencyID="TRY">100</cbc:LineExtensionAmount>
    <cbc:TaxExclusiveAmount currencyID="TRY">100</cbc:TaxExclusiveAmount>
    <cbc:TaxInclusiveAmount currencyID="TRY">118.00</cbc:TaxInclusiveAmount>
    <cbc:AllowanceTotalAmount currencyID="TRY">0</cbc:AllowanceTotalAmount>
    <cbc:PayableAmount currencyID="TRY">118.00</cbc:PayableAmount>
  </cac:LegalMonetaryTotal>
  <cac:InvoiceLine>
    <cbc:ID>1</cbc:ID>
    <cbc:InvoicedQuantity unitCode="C62">1</cbc:InvoicedQuantity>
    <cbc:LineExtensionAmount currencyID="TRY">100</cbc:LineExtensionAmount>
    <cac:AllowanceCharge>
      <cbc:ChargeIndicator>false</cbc:ChargeIndicator>
      <cbc:AllowanceChargeReason />
      <cbc:MultiplierFactorNumeric>0</cbc:MultiplierFactorNumeric>
      <cbc:Amount currencyID="TRY">0</cbc:Amount>
      <cbc:BaseAmount currencyID="TRY">100</cbc:BaseAmount>
    </cac:AllowanceCharge>
    <cac:TaxTotal>
      <cbc:TaxAmount currencyID="TRY">18.00</cbc:TaxAmount>
      <cac:TaxSubtotal>
        <cbc:TaxableAmount currencyID="TRY">100</cbc:TaxableAmount>
        <cbc:TaxAmount currencyID="TRY">18.00</cbc:TaxAmount>
        <cbc:Percent>18</cbc:Percent>
        <cac:TaxCategory>
          <cac:TaxScheme>
            <cbc:Name>KDV</cbc:Name>
            <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
          </cac:TaxScheme>
        </cac:TaxCategory>
      </cac:TaxSubtotal>
    </cac:TaxTotal>
    <cac:Item>
      <cbc:Name>DENEME</cbc:Name>
    </cac:Item>
    <cac:Price>
      <cbc:PriceAmount currencyID="TRY">100</cbc:PriceAmount>
    </cac:Price>
  </cac:InvoiceLine>
</Invoice>